enum UserType {
  RECRUITER
  NORMAL_USER
  ENTRY_MEMBERSHIP
  INTERMEDIATE_MEMBERSHIP
  ADVANCED_MEMBERSHIP
  ANONYMOUS
  ADMIN
}

enum ThirdPartyPlatform {
  WECHAT
  ALIPAY
}

type MemberShipStatus {
  lastPaymentAt: String!
  willExpireAt: String!
}

type User {
  _id: String! #mongodb internal id
  
  userId: String!
  email: String
  name: String
  nickName: String
  firstName: String
  lastName: String
  # gender: String
  gender: Int
  platform: String
  companyName: String
  role: UserType
  membershipStatus: MemberShipStatus
}

input UserRegistrationInput {
  email: String!
  firstName: String
  lastName: String
  companyName: String
}

type Job {
  _id: String!
  title: String!
  description: String
  companyName: String!
  country: String!
  city: String!
  address: String
  createdAt: String
  updatedAt: String
}

input JobInput {
  title: String!
  description: String!
  companyName: String
  country: String
  city: String
  address: String
}

input JobUpdate {
  _id: String!
  title: String
  description: String
  companyName: String
  country: String
  city: String
  address: String
}

type JobSearchPagingResult {
  jobs: [Job]
  pageSize: Int
  pageNumber: Int
  totalCount: Int
}

type Question {
  _id: String
  title: String
  content: String
  answers: [Answer]
  user: User
}

type Answer {
  _id: String
  content: String
  comments: [Comment]
  user: User
}

type Comment {
  _id: String
  content: String
  user: User
}

type AuthorizationResponse {
  jwtToken: String!
}


type Query {
  ### Job related
  searchJobs(userInput: String, pageNumber: Int): JobSearchPagingResult
  jobDetail(jobId: String!): Job

  ### Question related
  questionDetail(questionId: String!): Question
  allQuestions:[Question]

  ### Wechat Related
  wechatLoginUrl: String!
  wechatAuthorizationCallback(authorizationCode: String!, state: String!): AuthorizationResponse!

  ### google Related


  ### User related
  currentUserDetails: User
}

type Mutation {
  ### Job related
  addJob(job: JobInput): Job
  updateJob(job: JobUpdate): Job
  removeJob(jobId: String!): Job

  ### Question related
  createQuestion(title: String, content: String, userId: String): Question
  createAnswer(content: String, userId: String, questionId: String!): Question

  ### Registration related
  registerNewUser: String

  ### User related
  createUser(email: String, name: String, nickName: String, firstName: String, lastName: String, gender: Int, companyName: String, role: String): User
}

type createQuestionInput {
  title: String,
  content: String,
  userId: String
}
