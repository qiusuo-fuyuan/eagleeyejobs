enum UserType {
  RECRUITER
  NORMAL_USER
  ENTRY_MEMBERSHIP
  INTERMEDIATE_MEMBERSHIP
  ADVANCED_MEMBERSHIP
  ANONYMOUS
  ADMIN
}

enum ThirdPartyPlatform {
  WECHAT
  ALIPAY
}


type MemberShipStatus {
  lastPaymentAt: String!
  willExpireAt: String!
}

type User {
  _id: String! #mongodb internal id
  userId: String!
  email: String
  name: String
  profilePicture: String!
  nickName: String
  firstName: String
  lastName: String
  # gender: String
  gender: Int
  platform: String
  companyName: String
  role: UserType
  membershipStatus: MemberShipStatus
}

type Membership {
  _id: String!
  name: String
  price: String
  plan: String
  status: String
  payAt: String
  expireAt: String
  user: User
}

input UserRegistrationInput {
  email: String!
  firstName: String
  lastName: String
  companyName: String
}

type Job {
  _id: String!
  title: String!
  description: String
  companyName: String!
  country: String!
  city: String!
  address: String
  createdAt: String
  updatedAt: String
}

input JobInput {
  title: String!
  description: String!
  companyName: String
  country: String
  city: String
  address: String
}

input JobUpdate {
  _id: String!
  title: String
  description: String
  companyName: String
  country: String
  city: String
  address: String
}

type JobSearchPagingResult {
  jobs: [Job]
  pageSize: Int
  pageNumber: Int
  totalCount: Int
}

type Question {
  _id: String
  title: String
  content: String
  answers: [Answer]
  user: User
}

type Answer {
  _id: String
  content: String
  comments: [Comment]
  user: User
}

type Comment {
  _id: String
  content: String
  user: User
}

type createQuestionInput {
  title: String,
  content: String,
  userId: String
}


type JwtToken {
  jwtAccessToken: String!
  jwtRefreshToken: String!
}


type Query {
  ### Job related
  searchJobs(userInput: String, pageNumber: Int): JobSearchPagingResult
  jobDetail(jobId: String!): Job

  ### Question related
  questionDetail(questionId: String!): Question
  allQuestions: [Question]

  ### Registration related
  requestLoginQrCodeImage(provider: String): String
  
  ### Wechat Related
  wechatLoginUrl: String!

  ### google Related


  ### User related
  currentUserDetail: User
  searchUser:[User]
  ### User related
  queryUserDetail(userId: String!): User

  ### Membership
  queryMembershipDetail(membershipId: String!): Membership
  allMemberships:[Membership]
}


type Mutation {
  ### Job related
  addJob(job: JobInput): Job
  updateJob(job: JobUpdate): Job
  removeJob(jobId: String!): Job

  ### Question related
  createQuestion(title: String, content: String): Question
  createAnswer(content: String, questionId: String!): Question

  ## third party authorization callback
  wechatAuthorizationCallback(authorizationCode: String!, state: String!): JwtToken!

  ### Registration related
  registerNewUser(email:String, companyName:String, pass:String): User

  ### Membership related
  setMembership(name: String, status: String, payAt: String, expireAt: String):Membership

  ### Jwt Token related
  refreshJwtToken(jwtRefreshToken: String): JwtToken!

  ## request membership payment will return the link for the qrcode
  requestMembershipPayment(membershipId: Int, paymentProvider: String!): String!
}

type Subscription {
  questionCreated: Question
  answerCreated: Question
}